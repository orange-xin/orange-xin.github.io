<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>电脑登录锁屏密码显示解决方案</title>
    <url>/registry-%E7%94%B5%E8%84%91%E7%99%BB%E5%BD%95%E9%94%81%E5%B1%8F%E5%AF%86%E7%A0%81%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<p>当其他的电脑设置都试过了但电脑锁屏时依旧不要求输入密码，那么这时我们可以新建一个空白文档，比如用记事本新建一个空白文档，复制粘贴下面的内容，再将文件以 .reg 的后缀名保存，文件名任意，最后再双击创建的文件，点击确定。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY<span class="emphasis">_LOCAL_</span>MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Power]</span><br><span class="line"></span><br><span class="line">"AwayModeEnabled"=dword:00000000</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>About Computer</category>
      </categories>
      <tags>
        <tag>Computer Settings</tag>
      </tags>
  </entry>
  <entry>
    <title>scanf和scanf_sd的区别</title>
    <url>/scanf-scanf-s/</url>
    <content><![CDATA[<blockquote>
<p>在蛇形矩阵的编码过程中，我使用的是VS进行编码，在给n赋输入值的时候使用的是<code>scanf()</code>，但是VS在编译时会报错，并提示使用<code>scnaf_s()</code>，在换了函数过后的确结果报错问题。</p>
</blockquote>
<p>首先我们来看下这两个函数的联系和大致区别：</p>
<ul>
<li><p><code>scanf()</code>函数是标准C中提供的标准输入函数，用以读取用户输入的数据</p>
</li>
<li><p><code>scanf_s()</code>函数是Microsoft公司VS开发工具提供的一个<strong>功能相同</strong>的安全标准输入函数，从vc++2005开始，VS系统提供了<code>scanf_s()</code>。在调用该函数时，必须提供一个数字以表明最多读取多少位字符。</p>
</li>
</ul>
<p>由此我们可以看出，这两个函数的功能并没有什么区别，但是VS中为什么不使用<code>scanf()</code>呢？我们需要进一步了解它们的区别和使用场景：</p>
<p><code>scanf()</code>在读取数据时不检查边界，所以可能会造成内存访问越界；而如果用<code>scanf_s()</code>则可避免此问题：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如：分配了5字节的空间但是用户输入了10字节，就会导致scanf()读到10个字节</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">5</span>]=&#123;<span class="string">'\0'</span>&#125;;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line"><span class="comment">//如果输入1234567890，则5以后的部分会被写到别的变量所在的空间上去，从而可能会导致程序运行异常。</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">5</span>]=&#123;<span class="string">'\0'</span>&#125;;</span><br><span class="line">scanf_s(<span class="string">"%s"</span>,buf,<span class="number">5</span>); <span class="comment">//最多读取4个字符，因为buf[4]要放'\0' </span></span><br><span class="line"><span class="comment">//如果输入1234567890，则buf只会接受前4个字符</span></span><br><span class="line"><span class="comment">//注：scanf_s最后一个参数n是接收缓冲区的大小（即buf的容量），表示最多读取n-1个字符</span></span><br></pre></td></tr></table></figure>

<p>在蛇形矩阵的编码中，需要读取输入的int型，并且没有在<code>scanf_s()</code>里添加参数但仍然可用。并且很多带“_s”后缀的函数是为了让原版函数更安全，传入一个和参数有关的大小值，避免引用到不存在的元素，防止hacker利用原版的不安全性（漏洞）黑掉系统。</p>
<p>因此，使用<code>scanf()</code>还是<code>scanf_s()</code>具体需要看使用的编译器以及是否需要达到更安全的输入要求。</p>
]]></content>
      <categories>
        <category>编译器</category>
      </categories>
      <tags>
        <tag>VS</tag>
      </tags>
  </entry>
  <entry>
    <title>筛选数组方法-JS中的妙用</title>
    <url>/ScreeningArrayElement/</url>
    <content><![CDATA[<p><strong>题目要求：</strong>请筛选出数组 <code>arr = [1, 5, 85, 42, 30, 2, 11]</code>中大于20的元素，并将这些元素保存到新的数组<code>newArr</code>中。</p>
<p>无论何种语言，我们在筛选数组元素的时候，都可以用到下面的算法思路。这里以 JS 来举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">85</span>, <span class="number">42</span>, <span class="number">30</span>, <span class="number">2</span>, <span class="number">11</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &gt; <span class="number">20</span>)&#123;</span><br><span class="line">        newArr[j] = arr[i];</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [85, 42, 30]</span></span><br></pre></td></tr></table></figure>

<p>但是在 JavaScript 中，我们可以采用另一种思路方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">85</span>, <span class="number">42</span>, <span class="number">30</span>, <span class="number">2</span>, <span class="number">11</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = []; <span class="comment">// 这里 newArr 是一个空数组，length 属性为0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &gt; <span class="number">20</span>)&#123;</span><br><span class="line">        newArr[newArr.length] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>

<p>充分利用 length 属性的值来进行编码，可以减少代码量，但最重要的是提供了另一种思路。</p>
<p>感谢阅读！</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>蛇形矩阵（一）-对角线型</title>
    <url>/SnakelikeMatrixOne/</url>
    <content><![CDATA[<p><strong>题目要求</strong></p>
<p>​        将自然数1、2、3、···、N*N逐个顺序插入方阵中适当的位置，这个过程中沿斜线进行，构成蛇形排列阵。如N=4时的蛇形排列阵为：</p>
<p><img src= "/img/loading.gif" data-src="/SnakelikeMatrixOne/image-20200706204152026.png" alt="image-20200706204152026"></p>
<p>请编写C语言程序按以上规则输出N=5时的蛇形排列阵。</p>
<p><strong>算法思路：</strong></p>
<p>​        观察上述矩阵的数值增长线路，如下图所示：</p>
<p><img src= "/img/loading.gif" data-src="/SnakelikeMatrixOne/image-20200706212217241.png" alt="image-20200706212217241"></p>
<ul>
<li>初始状态：行 i = 0，j = 0 时，数值为1；</li>
<li>当移动到下一个位置时，需要把当前设定的k值变成下一步要移动的方向状态；</li>
<li>k = 1时，下一步的移动方向可能是 <ul>
<li>位于矩阵的第一行：k = 2；</li>
<li>位于矩阵的最后一行：k = 4；</li>
</ul>
</li>
<li>k = 2时，下一步的移动方向可能是 <ul>
<li>位于矩阵的最后一行：k = 1；</li>
<li>位于矩阵其他位置：k = 2；</li>
<li>位于矩阵的第一列：k = 3；</li>
</ul>
</li>
<li>k = 3时，下一步的移动方向可能是 <ul>
<li>位于矩阵的最后一列：k = 2；</li>
<li>位于矩阵的第一列：k = 4；</li>
</ul>
</li>
<li>k = 4时，下一步的移动方向可能是 <ul>
<li>位于矩阵的第一行：k = 1；</li>
<li>位于矩阵的最后一列：k = 3；</li>
<li>位于矩阵其它位置：k = 4；</li>
</ul>
</li>
</ul>
<p><strong>代码实现：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;  <span class="comment">//row</span></span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;  <span class="comment">//column</span></span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">3</span>;  <span class="comment">//down</span></span><br><span class="line">	<span class="comment">//k=1: to right; </span></span><br><span class="line">    <span class="comment">//k=2: to bottom left corner; </span></span><br><span class="line">	<span class="comment">//k=3: down; </span></span><br><span class="line">    <span class="comment">//k=4: to top right corner</span></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">10</span>][<span class="number">10</span>];	<span class="comment">//max size</span></span><br><span class="line">	arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//input</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Input n: "</span>);</span><br><span class="line">	scanf_s(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (i != n - <span class="number">1</span> || j != n - <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">			arr[i][j + <span class="number">1</span>] = arr[i][j] + <span class="number">1</span>;</span><br><span class="line">			j = j + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (i == n - <span class="number">1</span>) &#123;</span><br><span class="line">				k = <span class="number">4</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				k = <span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">2</span>) &#123;</span><br><span class="line">			arr[i + <span class="number">1</span>][j - <span class="number">1</span>] = arr[i][j] + <span class="number">1</span>;</span><br><span class="line">			j = j - <span class="number">1</span>;</span><br><span class="line">			i = i + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (j == <span class="number">0</span> &amp;&amp; i != n - <span class="number">1</span>) &#123;</span><br><span class="line">				k = <span class="number">3</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (i == n - <span class="number">1</span>) &#123;</span><br><span class="line">				k = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				k = <span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">3</span>) &#123;</span><br><span class="line">			arr[i + <span class="number">1</span>][j] = arr[i][j] + <span class="number">1</span>;</span><br><span class="line">			i = i + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (j == n - <span class="number">1</span>) &#123;</span><br><span class="line">				k = <span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				k = <span class="number">4</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">4</span>) &#123;</span><br><span class="line">			arr[i - <span class="number">1</span>][j + <span class="number">1</span>] = arr[i][j] + <span class="number">1</span>;</span><br><span class="line">			j = j + <span class="number">1</span>;</span><br><span class="line">			i = i - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j != n - <span class="number">1</span>) &#123;</span><br><span class="line">				k = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (j == n - <span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				k = <span class="number">3</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				k = <span class="number">4</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//print</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; n; a++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; n; b++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\t"</span>, arr[a][b]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现对角线型蛇形矩阵的算法不止这一种，可以多多了解。</p>
<p>小小注意点：</p>
<ul>
<li>二维数组的第一个参数是行，第二个参数是列；</li>
<li>因为使用的是 VS 编写代码，所以代码中使用的是 <code>scanf_s</code>函数；（参考：<a href="https://orange-xin.github.io/scanf-scanf-s/">scanf()和scanf_s()的区别</a>）</li>
<li>在代码执行时循环体中 k = 2 的第一行代码会报以下的错，目前还没有找到解决方法：<img src= "/img/loading.gif" data-src="/SnakelikeMatrixOne/image-20200706214700749.png" alt="image-20200706214700749"></li>
</ul>
<p>感谢阅读！</p>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-basic instructions</title>
    <url>/hexo-basic%20instructions/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>. (rewrite according to original doc given by theme developer)</p>
<h1 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h1><h2 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h2><p>git bash in your “blog” root directory</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h2 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h2 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h2><p>You can browse your blog by opening your port 4000(default localhost port). But generate static files first! </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<p>You can change the default port to the one you like, just do this to make it a 5000 port.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s -p 5000</span><br></pre></td></tr></table></figure>



<h2 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h2><p>You can browse your blog on your website once succeeded in deploying. It takes a little while to take effect. But generate static files first! </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>Instructions</category>
      </categories>
      <tags>
        <tag>install</tag>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
