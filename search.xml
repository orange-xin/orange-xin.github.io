<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>电脑登录锁屏密码显示解决方案</title>
    <url>/registry-%E7%94%B5%E8%84%91%E7%99%BB%E5%BD%95%E9%94%81%E5%B1%8F%E5%AF%86%E7%A0%81%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<p>&emsp;&emsp;当其他的电脑设置都试过了但电脑锁屏时依旧不要求输入密码，那么这时我们可以新建一个空白文档，比如用记事本新建一个空白文档，复制粘贴下面的内容，再将文件以 .reg 的后缀名保存，文件名任意，最后再双击创建的文件，点击确定。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY<span class="emphasis">_LOCAL_</span>MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Power]</span><br><span class="line"></span><br><span class="line">"AwayModeEnabled"=dword:00000000</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>About Computer</category>
      </categories>
      <tags>
        <tag>Computer Settings</tag>
      </tags>
  </entry>
  <entry>
    <title>scanf和scanf_s的区别</title>
    <url>/scanf-scanf-s/</url>
    <content><![CDATA[<blockquote>
<p>在蛇形矩阵的编码过程中，我使用的是VS进行编码，在给n赋输入值的时候使用的是<code>scanf()</code>，但是VS在编译时会报错，并提示使用<code>scnaf_s()</code>，在换了函数过后的确结果报错问题。</p>
</blockquote>
<p>首先我们来看下这两个函数的联系和大致区别：</p>
<ul>
<li><p><code>scanf()</code>函数是标准C中提供的标准输入函数，用以读取用户输入的数据</p>
</li>
<li><p><code>scanf_s()</code>函数是Microsoft公司VS开发工具提供的一个<strong>功能相同</strong>的安全标准输入函数，从vc++2005开始，VS系统提供了<code>scanf_s()</code>。在调用该函数时，必须提供一个数字以表明最多读取多少位字符。</p>
</li>
</ul>
<p>&emsp;&emsp;由此我们可以看出，这两个函数的功能并没有什么区别，但是VS中为什么不使用<code>scanf()</code>呢？我们需要进一步了解它们的区别和使用场景：</p>
<p>&emsp;&emsp;<code>scanf()</code>在读取数据时不检查边界，所以可能会造成内存访问越界；而如果用<code>scanf_s()</code>则可避免此问题：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如：分配了5字节的空间但是用户输入了10字节，就会导致scanf()读到10个字节</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">5</span>]=&#123;<span class="string">'\0'</span>&#125;;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line"><span class="comment">//如果输入1234567890，则5以后的部分会被写到别的变量所在的空间上去，从而可能会导致程序运行异常。</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">5</span>]=&#123;<span class="string">'\0'</span>&#125;;</span><br><span class="line">scanf_s(<span class="string">"%s"</span>,buf,<span class="number">5</span>); <span class="comment">//最多读取4个字符，因为buf[4]要放'\0' </span></span><br><span class="line"><span class="comment">//如果输入1234567890，则buf只会接受前4个字符</span></span><br><span class="line"><span class="comment">//注：scanf_s最后一个参数n是接收缓冲区的大小（即buf的容量），表示最多读取n-1个字符</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;在蛇形矩阵的编码中，需要读取输入的int型，并且没有在<code>scanf_s()</code>里添加参数但仍然可用。并且很多带“_s”后缀的函数是为了让原版函数更安全，传入一个和参数有关的大小值，避免引用到不存在的元素，防止hacker利用原版的不安全性（漏洞）黑掉系统。</p>
<p>&emsp;&emsp;因此，使用<code>scanf()</code>还是<code>scanf_s()</code>具体需要看使用的编译器以及是否需要达到更安全的输入要求。</p>
]]></content>
      <categories>
        <category>编译器</category>
      </categories>
      <tags>
        <tag>VS</tag>
      </tags>
  </entry>
  <entry>
    <title>筛选数组方法-JS中的妙用</title>
    <url>/ScreeningArrayElement/</url>
    <content><![CDATA[<p><strong>题目要求</strong></p>
<p>&emsp;&emsp;请筛选出数组 <code>arr = [1, 5, 85, 42, 30, 2, 11]</code>中大于20的元素，并将这些元素保存到新的数组<code>newArr</code>中。</p>
<p><strong>算法思路&amp;代码实现</strong>    </p>
<p>&emsp;&emsp;无论何种语言，我们在筛选数组元素的时候，都可以用到下面的算法思路。这里以 JS 来举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">85</span>, <span class="number">42</span>, <span class="number">30</span>, <span class="number">2</span>, <span class="number">11</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &gt; <span class="number">20</span>)&#123;</span><br><span class="line">        newArr[j] = arr[i];</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [85, 42, 30]</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;但是在 JavaScript 中，我们可以采用另一种思路方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">85</span>, <span class="number">42</span>, <span class="number">30</span>, <span class="number">2</span>, <span class="number">11</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = []; <span class="comment">// 这里 newArr 是一个空数组，length 属性为0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &gt; <span class="number">20</span>)&#123;</span><br><span class="line">        newArr[newArr.length] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;充分利用 length 属性的值来进行编码，可以减少代码量，但最重要的是提供了另一种思路，这也是需要经验的积累的，加油！</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-basic instructions</title>
    <url>/hexo-basic-instructions/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>. (rewrite according to original doc given by theme developer)</p>
<h1 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h1><h2 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h2><p>git bash in your “blog” root directory</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h2 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h2 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h2><p>You can browse your blog by opening your port 4000(default localhost port). But generate static files first! </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<p>You can change the default port to the one you like, just do this to make it a 5000 port.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s -p 5000</span><br></pre></td></tr></table></figure>



<h2 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h2><p>You can browse your blog on your website once succeeded in deploying. It takes a little while to take effect. But generate static files first! </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>Instructions</category>
      </categories>
      <tags>
        <tag>install</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>学习笔记#1-数组去重</title>
    <url>/StudyNotes-1-UniqueArray/</url>
    <content><![CDATA[<p><strong>题目要求</strong></p>
<p>&emsp;&emsp;一个数组，除去数组中重复的元素，并输出去重后的数组。</p>
<p><strong>算法思路</strong></p>
<p>&emsp;&emsp;遍历需要数组，用旧数组里的元素去查找新数组里的元素，如果该元素在新数组当中，则不添加到新数组当中，反之则添加到新数组中。</p>
<p>&emsp;&emsp;这个题目需要实现三个关键步骤：一是遍历旧数组，二是根据我们获得的旧数组元素查找新数组中是否已经有相同的元素，三是将新数组中没有的元素添加到新数组当中。遍历数组很容易实现用for循环即可，那么现在需要实现的就是查找元素是否已经在新数组当中。</p>
<p>&emsp;&emsp;拿到这个题目我首先想到的是遍历旧数组，用旧数组中的元素匹配新数组的元素，匹配采用的是遍历新数组所有元素的方法，也就是用旧数组的元素对新数组中的元素一一匹配，需要两个for循环。添加元素到数组的方法有很多，这里使用内置函数<code>arrName.push()</code>来实现，方便快捷。</p>
<p><strong>代码实现</strong></p>
<p>&emsp;&emsp;以下为实现代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">30</span>, <span class="number">10</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line">newArr[<span class="number">0</span>] = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; newArr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newArr[j] == arr[i]) &#123;</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 新数组里已经有该元素</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newArr.push(arr[i]);</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 这里需要break，否则会继续遍历</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;想想还可不可以简化下呢？比如怎么一下子判断新数组里有没有需要查找的元素。而正好，新数组中的元素是不会重复的，那么第二个关键步骤中使用数组的内置函数<code>arrName.indexOf()</code>来判断新数组内是否有需要判断的旧数组中的元素就显得更简单了，根据该内置函数的返回值来判断，若为-1，则新数组中没有该旧数组中的那一个元素，并将该元素添加到新数组当中。</p>
<p>&emsp;&emsp;以下为关键代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">60</span>, <span class="number">10</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = []; <span class="comment">// 空数组，用于保存“独一无二”的元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 使用数组内置函数indexOf()，根据返回结果判断新数组中是否已有该元素</span></span><br><span class="line">    <span class="keyword">if</span> (newArr.indexOf(arr[i]) == <span class="number">-1</span>) &#123;</span><br><span class="line">        newArr.push(arr[i]); <span class="comment">// 使用数组内置函数push()将元素添加到新数组元素的末尾，不需要担心顺序问题</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印输出</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'原数组为'</span> + arr);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'去重后数组为'</span> + newArr);</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;最初的代码是在学习过程中第一时间想到的，学习了更多用的东西更多之前的代码可能就会显得有点憨憨的，也挺可爱的。</p>
]]></content>
      <categories>
        <category>Study Notes</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>蛇形矩阵-对角线型</title>
    <url>/SnakelikeMatrix/</url>
    <content><![CDATA[<p><strong>题目要求</strong></p>
<p>&emsp;&emsp;将自然数1、2、3、···、N*N逐个顺序插入方阵中适当的位置，这个过程中沿斜线进行，构成蛇形排列阵。如N=4时的蛇形排列阵为：</p>
<p><img src= "/img/loading.gif" data-src="/SnakelikeMatrix/image-20200706204152026.png" alt="image-20200706204152026"></p>
<p>请编写C语言程序按以上规则输出N=5时的蛇形排列阵。</p>
<p><strong>算法思路：</strong></p>
<p>&emsp;&emsp;观察上述矩阵的数值增长线路，如下图所示：</p>
<p><img src= "/img/loading.gif" data-src="/SnakelikeMatrix/image-20200706212217241.png" alt="image-20200706212217241"></p>
<ul>
<li>初始状态：行 i = 0，j = 0 时，数值为1；</li>
<li>当移动到下一个位置时，需要把当前设定的k值变成下一步要移动的方向状态；</li>
<li>k = 1时，下一步的移动方向可能是 <ul>
<li>位于矩阵的第一行：k = 2；</li>
<li>位于矩阵的最后一行：k = 4；</li>
</ul>
</li>
<li>k = 2时，下一步的移动方向可能是 <ul>
<li>位于矩阵的最后一行：k = 1；</li>
<li>位于矩阵其他位置：k = 2；</li>
<li>位于矩阵的第一列：k = 3；</li>
</ul>
</li>
<li>k = 3时，下一步的移动方向可能是 <ul>
<li>位于矩阵的最后一列：k = 2；</li>
<li>位于矩阵的第一列：k = 4；</li>
</ul>
</li>
<li>k = 4时，下一步的移动方向可能是 <ul>
<li>位于矩阵的第一行：k = 1；</li>
<li>位于矩阵的最后一列：k = 3；</li>
<li>位于矩阵其它位置：k = 4；</li>
</ul>
</li>
</ul>
<p><strong>代码实现：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;  <span class="comment">//row</span></span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;  <span class="comment">//column</span></span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">3</span>;  <span class="comment">//down</span></span><br><span class="line">	<span class="comment">//k=1: to right; </span></span><br><span class="line">    <span class="comment">//k=2: to bottom left corner; </span></span><br><span class="line">	<span class="comment">//k=3: down; </span></span><br><span class="line">    <span class="comment">//k=4: to top right corner</span></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">10</span>][<span class="number">10</span>];	<span class="comment">//max size</span></span><br><span class="line">	arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//input</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Input n: "</span>);</span><br><span class="line">	scanf_s(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (i != n - <span class="number">1</span> || j != n - <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">			arr[i][j + <span class="number">1</span>] = arr[i][j] + <span class="number">1</span>;</span><br><span class="line">			j = j + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (i == n - <span class="number">1</span>) &#123;</span><br><span class="line">				k = <span class="number">4</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				k = <span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">2</span>) &#123;</span><br><span class="line">			arr[i + <span class="number">1</span>][j - <span class="number">1</span>] = arr[i][j] + <span class="number">1</span>;</span><br><span class="line">			j = j - <span class="number">1</span>;</span><br><span class="line">			i = i + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (j == <span class="number">0</span> &amp;&amp; i != n - <span class="number">1</span>) &#123;</span><br><span class="line">				k = <span class="number">3</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (i == n - <span class="number">1</span>) &#123;</span><br><span class="line">				k = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				k = <span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">3</span>) &#123;</span><br><span class="line">			arr[i + <span class="number">1</span>][j] = arr[i][j] + <span class="number">1</span>;</span><br><span class="line">			i = i + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (j == n - <span class="number">1</span>) &#123;</span><br><span class="line">				k = <span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				k = <span class="number">4</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">4</span>) &#123;</span><br><span class="line">			arr[i - <span class="number">1</span>][j + <span class="number">1</span>] = arr[i][j] + <span class="number">1</span>;</span><br><span class="line">			j = j + <span class="number">1</span>;</span><br><span class="line">			i = i - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j != n - <span class="number">1</span>) &#123;</span><br><span class="line">				k = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (j == n - <span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				k = <span class="number">3</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				k = <span class="number">4</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//print</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; n; a++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; n; b++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\t"</span>, arr[a][b]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;实现对角线型蛇形矩阵的算法不止这一种，可以多多了解。</p>
<p>小小注意点：</p>
<ul>
<li>二维数组的第一个参数是行，第二个参数是列；</li>
<li>因为使用的是 VS 编写代码，所以代码中使用的是 <code>scanf_s</code>函数；（参考：[scanf()和scanf_s()的区别][1]）</li>
<li>在代码执行时循环体中 k = 2 的第一行代码会报以下的错，目前还没有找到解决方法：<img src= "/img/loading.gif" data-src="/SnakelikeMatrix/image-20200706214700749.png" alt="image-20200706214700749"></li>
</ul>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>English-Labels</title>
    <url>/English-Labels/</url>
    <content><![CDATA[<h2 id="lt-ol-gt-ordered-list"><a href="#lt-ol-gt-ordered-list" class="headerlink" title="&lt;ol&gt; ordered list"></a>&lt;ol&gt; ordered list</h2><h2 id="lt-ul-gt-unordered-list"><a href="#lt-ul-gt-unordered-list" class="headerlink" title="&lt;ul&gt; unordered list"></a>&lt;ul&gt; unordered list</h2>]]></content>
      <categories>
        <category>English</category>
      </categories>
  </entry>
  <entry>
    <title>hexo YAMLException:can not read a block mapping entry; a multiline key may not be an implicit key at</title>
    <url>/Error-hexo-YAMLException/</url>
    <content><![CDATA[<blockquote>
<p>今天在整理学习笔记的时候出现了小插曲，使用命令hexo g的时候总是报错，于是我就开始了“漫漫”找错之旅…</p>
</blockquote>
<p>&emsp;&emsp;出错的是我的学习笔记#2，报错内容如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">ERROR Process failed: _posts/StudyNotes-2-PositionOfLabelsrcipt.md</span><br><span class="line">YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 10, column 8:</span><br><span class="line"><span class="code">    top_img:</span></span><br><span class="line"><span class="code">           ^</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;从报错信息来看，就是我的第十行第八列出了问题，是设置文章顶部图片的那一行。我在网上搜了下解决方法，基本上都是说是后面没有空格才导致的问题，所以我去检查了下那一行的空格，发现并没有问题，在<code>top_img:</code>后面有一个空格，紧接着的就是图片链接。没有问题啊，怎么会这样？</p>
<p>&emsp;&emsp;我又看了一些解决方法，发现可能是符号出了问题，有一位博主出现同类问题的时候，发现是报错行数的上面那一行，也就是标题的错误，并且是因为标题中含有<code>[]</code>的问题，改成<code>&lt;&gt;</code>就没问题了。然而…我的标题里是<code>&lt;&gt;</code>，应该是没问题的，但当时脑子不好使，在试了空格无效之后有种想死马当活马医的感觉，觉得可能是<code>&lt;&gt;</code>的问题（我好傻），把<code>&lt;&gt;</code>去掉了，果然不出所料！没用！那个刺眼的ERROR还是在我的屏幕上第n次闪亮登场了…</p>
<p>&emsp;&emsp;看了这么多解决同类问题的博客，我意识到问题可能还是出在空格，我又去检查了下我的格式，一个一个地检查，终于…好像发现哪里不对劲了——</p>
<p><img src= "/img/loading.gif" data-src="/Error-hexo-YAMLException/errorLine.JPG" alt="errorLine"></p>
<p>&emsp;&emsp;这是我文档当中看到的格式，我使用markdown编辑器的时候习惯把窗口缩小编写，问题就是因为这个才难以发现的！我在编辑器里看到的格式没问题，冒号后面也有空格，但是当我回退的时候发现——链接是单独一行的！hexo博客文章的格式很固定，冒号后面一个空格然后跟上内容，如果要提行的话必须使用<code>-</code>短横线，而这个格式看上去是第一种，但其实两种都不是！说是第一种但链接单独提行了，说是第二种但有没有短横线，哪种都不属于就很尴尬呗~所以我把链接放到了冒号后面，再在之间添加了一个空格就解决了。</p>
<p>&emsp;&emsp;发现解决方法的时候我就意识到了我哪里出了问题，链接我是直接从另一个文章里copy过来的，完全没有注意格式，而且编辑器窗口缩小了，所以我以为我看到的效果是因为长度容纳不下自动提行，但这次正是因为靠经验才找了这么久QAQ，吃一堑长一智！</p>
]]></content>
      <categories>
        <category>Error Road</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>学习笔记#2-&lt;script&gt;标签应该放在哪里？</title>
    <url>/StudyNotes-2-PositionOfScriptLabel/</url>
    <content><![CDATA[<blockquote>
<p>在初学JS的时候，&lt;script&gt;&lt;/script&gt;经常随心所欲地放，好像也没什么影响，但学到后面发现影响就大了，所以查找资料整理了&lt;script&gt;&lt;/script&gt;放不同位置的不同效果以及区别。</p>
</blockquote>
<p>&emsp;&emsp;<code>&lt;script&gt;&lt;/script&gt;</code>一般都被放在头部和尾部，头部就是<code>&lt;head&gt;</code>里，尾部就是<code>&lt;body&gt;</code>里（<code>&lt;/body&gt;</code>上面）。那么放在这两个地方有什么不同的效果和区别呢？</p>
<p>&emsp;&emsp;首先是<strong>加载快慢</strong>的问题。</p>
<p>&emsp;&emsp;把<code>&lt;script&gt;&lt;/script&gt;</code>放在头部里，浏览器在解析HTML文件的时候会优先下载并执行JS文件，完成之后在往下解析其他的HTML。但浏览器在下载JS时，是不能多个JS并发一起下载的。不管JS是不来来自同一个host，浏览器最多只能同时下载两个JS，且浏览器下载JS时，就block掉解析其他HTML的工作。将script放在头部，会让网页内容呈现滞后，导致用户感觉到卡。</p>
<p>&emsp;&emsp;而把<code>&lt;script&gt;&lt;/script&gt;</code>放在尾部，浏览器在解析的时候会先解析完整个HTML界面，再往下下载执行JS，这样在一定程度上避免了网页内容呈现滞后的情况，但对于一些高度依赖于JS的网页，还是会显得慢。</p>
<p>&emsp;&emsp;接着来说<strong>适用性</strong>的问题。</p>
<p>&emsp;&emsp;把标签放到这两个地方，除了加载快慢的不同，还有什么不同呢？来看下下面的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        function btnClick()&#123;</span></span><br><span class="line"><span class="regexp">            alert('Hello!');</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button id="btn" onclick="btnClick()"&gt;点我&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;上面的代码会在网页上显示一个按钮，并且我们点击的时候会弹出警示框，没问题！那么把代码修改下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var btn=document.getElementById('btn');</span></span><br><span class="line"><span class="regexp">        btn.onclick=function()&#123;</span></span><br><span class="line"><span class="regexp">            alert('World!');</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button id="btn"&gt;点我&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;把我们定义的函数去掉，绑定的事件也去掉，换成了使用DOM的匿名函数。但是无论怎么点这个按钮，都不会弹出警示框，这说明当JS脚本放在<code>&lt;head&gt;&lt;/head&gt;</code>里的时候，页面DOM元素加载完之前，JS脚本就已经执行完了。所以这个位置的JS适合做一些全局定义且后期不怎么变化的事情。而如果将JS放在尾部，是行得通的，因为放在尾部的JS是等页面所有元素加载完成了之后才执行的，不存在找不到元素的情况。</p>
<p>&emsp;&emsp;单纯地看放的位置好像没有哪种是既能满足加载速度，同时适用性也很强的解决方案。在网上看到了两种解决方案，作了下整理：</p>
<ol>
<li>将代码写入onload事件中，onload也就是等页面加载好的一个事件，让里面的如下内容成为内嵌函数。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'Woeld!'</span>);</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>引入外部JS文件时使用：使用<code>async</code>和<code>defer</code>，这两个属性能让浏览器做到一边下载JS（还是只能同时下载两个JS），一边解析HTML。优点不是增加JS的并发下载数量，而是做到下载时不block解析HTML。带<code>async</code>属性的script会异步执行，只要下载完就执行，这会导致script2.js可能先于script1.js执行（如果script2.js比较大，下载慢）。<code>defer</code>就能保证script有序执行，script1.js先执行，script2.js后执行。更详细具体的解释见<a href="https://www.w3school.com.cn/tags/att_script_async.asp" target="_blank" rel="noopener">HTML 5 <script> async 属性</a></li>
</ol>
<p>参考文章：</p>
<p>[1] <a href="https://blog.csdn.net/ybdesire/article/details/49284699" target="_blank" rel="noopener">https://blog.csdn.net/ybdesire/article/details/49284699</a></p>
<p>[2] <a href="https://blog.csdn.net/Richard1997/article/details/87350174?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param" target="_blank" rel="noopener">https://blog.csdn.net/Richard1997/article/details/87350174?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param</a></p>
</script></a></li></ol>]]></content>
      <categories>
        <category>Study Notes</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows小知识点-cmd的快捷打开方式以及批量修改图片格式方法</title>
    <url>/Windows-cmd-lock-screen/</url>
    <content><![CDATA[<blockquote>
<p>今天windows聚焦锁屏很好看，想保存下来，但图片位置忘了（也记不住），问了度娘之后顺带学了些小技巧，在这里记录下来</p>
</blockquote>
<h2 id="windows聚焦锁屏壁纸文件保存路径"><a href="#windows聚焦锁屏壁纸文件保存路径" class="headerlink" title="windows聚焦锁屏壁纸文件保存路径"></a>windows聚焦锁屏壁纸文件保存路径</h2><p>&emsp;&emsp;文件的保存路径是这样的：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">C:\Users\你的用户名\AppData\Local\Packages\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\LocalState\Assets</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;如果还想更方便一点，就直接复制粘贴下面的地址到文件管理器就行啦：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">%localappdata%\Packages\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\LocalState\Assets</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;其实也就省略了上面路径修改用户名的工作量，不过复制粘贴总要来的快点嘛。</p>
<h2 id="cmd在文件夹中的简单打开方式"><a href="#cmd在文件夹中的简单打开方式" class="headerlink" title="cmd在文件夹中的简单打开方式"></a>cmd在文件夹中的简单打开方式</h2><p>&emsp;&emsp;我看了很多打开cmd的教程，不外乎都是win+R，然后输入cmd打开，方法没问题但万一文件夹的位置比较“靠下”呢？用命令定位到文件夹还是要花费很长的时间，不太方便。</p>
<p>&emsp;&emsp;但是简单的打开方式还是有的！<font color="red"><strong>打开文件夹所在位置，删掉文件夹上方路径框内的内容，输入cmd，敲回车</strong></font>，搞定！就是这么简单！</p>
<h2 id="cmd命令批量修改图片格式"><a href="#cmd命令批量修改图片格式" class="headerlink" title="cmd命令批量修改图片格式"></a>cmd命令批量修改图片格式</h2><p>&emsp;&emsp;举个例子就会了：</p>
<p>&emsp;&emsp;<code>ren *.png *.jpg</code>：ren是命令名称，*是通配符，表示所有同一种类型的文件格式。该命令的意思就是将该文件夹中所有的png格式图片转化为JPG格式的图片。注意ren后有空格，.png后面有空格。</p>
<p>&emsp;&emsp;那么<code>ren *. *.jpg</code>就是把没有确切文件类型的图片转换成JPG格式的图片，在保存windows聚焦锁屏的时候用得上。</p>
]]></content>
      <categories>
        <category>About Computer</category>
      </categories>
      <tags>
        <tag>Computer Tips</tag>
      </tags>
  </entry>
  <entry>
    <title>Similar Words of Coding in English</title>
    <url>/English-SimilarWordsOfCoding-1/</url>
    <content><![CDATA[<p>【All the annotation of words is from Collins dictionary.】</p>
<h2 id="frame-amp-framework"><a href="#frame-amp-framework" class="headerlink" title="frame &amp; framework"></a>frame &amp; framework</h2><h3 id="frame"><a href="#frame" class="headerlink" title="frame"></a>frame</h3><ol>
<li>N-COUNT The <strong>frame</strong> of a picture or mirror is the wood, metal, or plastic that is fitted around it, especially when it is displayed or hung on a wall.<ul>
<li>Estelle kept a photograph of her mother in a silver frame on the kitchen mantelpiece.</li>
</ul>
</li>
<li>N-COUNT The <strong>frame</strong> of an object such as a building, chair, or window is the arrangement of wooden, metal, or plastic bars between which other material is fitted, and which give the object its strength and shape. </li>
<li>N-COUNT The <strong>frames</strong> of a pair of glasses are all the metal or plastic parts of it, but not the lenses. <ul>
<li>He was wearing new glasses with gold wire frames.</li>
</ul>
</li>
<li>N-COUNT A <strong>frame</strong> of movie film is one of the many separate photographs that it consists of.<ul>
<li>Standard 8mm projects at 16 frames per second.</li>
</ul>
</li>
<li>V-T When a picture or photograph <strong>is framed</strong>, it is put in a frame.<ul>
<li>The picture is now ready to be mounted and framed.</li>
</ul>
</li>
</ol>
<h3 id="framework"><a href="#framework" class="headerlink" title="framework"></a>framework</h3><ol>
<li>N-COUNT A <strong>framework</strong> is a particular set of rules, ideas, or beliefs which you use in order to deal with problems or to decide what to do.<ul>
<li>…within the framework of federal regulations.</li>
</ul>
</li>
<li>more abstract compared with the word frame. <ul>
<li>the framework of the project</li>
</ul>
</li>
</ol>
<p>【All the annotation of words is from Collins dictionary.】</p>
]]></content>
      <categories>
        <category>English</category>
      </categories>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/git-commands/</url>
    <content><![CDATA[<h1 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m "info"</span><br><span class="line"></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>



<h1 id="git版本相关"><a href="#git版本相关" class="headerlink" title="git版本相关"></a>git版本相关</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">git --version</span><br><span class="line"></span><br><span class="line">git update-git-for-windows</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>About Computer</category>
        <category>Study Notes</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
